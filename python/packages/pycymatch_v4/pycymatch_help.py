##################
# PYCYMATCH HELP #
##################

def print_help():
    
   '''
   Function that prints the help information for pycymatch.py.
   '''
   print '====================='
   print ' PYCYMATCH V1.0 2014 '
   print '====================='
   print ''
   print '1) To run the code:'
   print ''
   print '  >> python pycymatch -c <CLUSTER_FILE> -m <MOCK_FILE>'
   print ''
   print '  Running the code as above assumes the following default column numbers:'
   print ''
   print '   - In the CLUSTER_FILE:'
   print '     RA[1] DEC[2] Z[3] NGAL[4] S/N[5]'
   print ''
   print '   - In the MOCK_FILE:'
   print '     ID[1] RA[2] DEC[3] Z[4] NGAL[5] MASS[6] SIZE[8]'
   print ''
   print '  The code also defaults to delta_z = 0.03 for the \"good\" mocks.'
   print ''
   print '2) Options:'
   print ''
   print '  --delta_z       (set delta_z value) [default 0.03]'
   print '  --c_ra_col      (set column number of RA in the CLUSTER_FILE) [default 1]'
   print '  --c_dec_col     (set column number of DEC in the CLUSTER_FILE) [default 2]'
   print '  --c_z_col       (set column number of Z in the CLUSTER_FILE) [default 3]'
   print '  --c_rich_col    (set column number of NGAL in the CLUSTER_FILE) [default 4]'
   print '  --c_sn_col      (set column number of S/N in the CLUSTER_FILE) [default 5]'
   print '  --m_id_col      (set column number of ID in the MOCK_FILE) [default 1]'
   print '  --m_ra_col      (set column number of RA in the MOCK_FILE) [default 2]'
   print '  --m_dec_col     (set column number of DEC in the MOCK_FILE) [default 3]'
   print '  --m_z_col       (set column number of Z in the MOCK_FILE) [default 4]'
   print '  --m_rich_col    (set column number of NGAL in the MOCK_FILE) [default 5]'
   print '  --m_mass_col    (set column number of MASS in the MOCK_FILE) [default 6]'
   print '  --m_size_col    (set column number of SIZE in arcseconds in the MOCK_FILE) [default 8]'
   print '  --min_rich_bin  (set minimum for binning in richness) [default 0]'
   print '  --max_rich_bin  (set maximum for binning in richness) [default maximum richness value found in either catalogue]'
   print '  --rich_bin_size (set size of bin in richness) [default 50]'
   print '  --min_mass_bin  (set minimum for binning in mass) [default 13.0]'
   print '  --max_mass_bin  (set maximum for binning in mass) [default 15.0]'
   print '  --mass_bin_size (set size of bin in mass) [default 0.1]'
   print '  --min_z_bin     (set minimum for binning in redshift) [default 0.0]'
   print '  --max_z_bin     (set maximum for binning in redshift) [default 2.5]'
   print '  --z_bin_size    (set size of bin in redshift) [default 0.1]'
   print ''
   print '3) Examples:'
   print ''
   print '  e.g. Bellagamba \"good\" catalogue:'
   print '    >> python pycymatch -c Nice_Challenge_H_Good.dat -m goodhalos.v1.1.cat.cut'
   print ''
   print '  e.g. Licitra \"good\" catalogue:'
   print '    >> python pycymatch -c Cluster_CatalogGOOD.cat -m goodhalos.v1.1.cat.cut --c_rich_col 6 --c_sn_col 8'
   print ''
   print '  e.g. Benoist \"bad\" catalogue:'
   print '    >> python pycymatch -c CB_challenge_bad.asc -m badhalos.v1.1.cat.cut --delta_z 0.05'

   exit(-1)
